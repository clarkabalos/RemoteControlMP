package UI;

import java.net.*;
import java.util.ArrayList;

public class RemoteControl extends javax.swing.JFrame {
    private DatagramSocket clientSocket;
    private InetAddress IPAddress;
    private boolean isPlaying = false;
    private boolean isSlideshowPlaying = false;
    
    public RemoteControl(DatagramSocket _clientSocket, InetAddress _IPAddress) throws Exception {
        initComponents();
        clientSocket = _clientSocket;
        IPAddress = _IPAddress;
        requestToServer("Initialize");
        editTime.setVisible(false);
        applyBtn.setVisible(false);
        playBtn.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playBtn = new javax.swing.JButton();
        applyBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        nextBtn = new javax.swing.JButton();
        slideshowBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        editTime = new javax.swing.JFormattedTextField();
        fileNameLabel = new javax.swing.JLabel();
        imagePreview = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(230, 390));
        setPreferredSize(new java.awt.Dimension(230, 390));
        setResizable(false);
        setSize(new java.awt.Dimension(230, 390));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeWindow(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        playBtn.setFont(new java.awt.Font("Calibri Light", 1, 15)); // NOI18N
        playBtn.setText("Play");
        playBtn.setBorder(null);
        playBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playBtn.setOpaque(false);
        playBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playBtnActionPerformed(evt);
            }
        });
        getContentPane().add(playBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 310, 60, 40));

        applyBtn.setFont(new java.awt.Font("Calibri Light", 1, 12)); // NOI18N
        applyBtn.setText("Apply");
        applyBtn.setBorder(null);
        applyBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        applyBtn.setOpaque(false);
        applyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyBtnActionPerformed(evt);
            }
        });
        getContentPane().add(applyBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 310, 50, 40));

        backBtn.setFont(new java.awt.Font("Calibri Light", 1, 15)); // NOI18N
        backBtn.setText("Back");
        backBtn.setBorder(null);
        backBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        getContentPane().add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, 60, 40));

        nextBtn.setFont(new java.awt.Font("Calibri Light", 1, 15)); // NOI18N
        nextBtn.setText("Next");
        nextBtn.setBorder(null);
        nextBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nextBtn.setOpaque(false);
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });
        getContentPane().add(nextBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, 60, 40));

        slideshowBtn.setFont(new java.awt.Font("Calibri Light", 1, 15)); // NOI18N
        slideshowBtn.setText("Start Slideshow");
        slideshowBtn.setBorder(null);
        slideshowBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        slideshowBtn.setOpaque(false);
        slideshowBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slideshowBtnActionPerformed(evt);
            }
        });
        getContentPane().add(slideshowBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 250, 130, 40));

        jLabel1.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Universal Remote");
        jLabel1.setToolTipText("");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 150, 40));

        editTime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        editTime.setText("1000");
        editTime.setInheritsPopupMenu(true);
        getContentPane().add(editTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 310, 60, 40));

        fileNameLabel.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        fileNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(fileNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 210, 20));

        imagePreview.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imagePreview.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        getContentPane().add(imagePreview, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 210, 120));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed
        try {
            if(isPlaying) {
                playBtn.setText("Play");
                isPlaying = false;
                requestToServer("Stop");
            }
            requestToServer("Next");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_nextBtnActionPerformed

    private void slideshowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slideshowBtnActionPerformed
        if(!isSlideshowPlaying) {
            try {
                requestToServer("StartSlideshow");
                slideshowBtn.setText("Stop Slideshow");
                isSlideshowPlaying = true;
                //playBtn.setVisible(false);
                editTime.setVisible(true);
                applyBtn.setVisible(true);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            try {
                requestToServer("StopSlideshow");
                slideshowBtn.setText("Start Slideshow");
                isSlideshowPlaying = false;
                editTime.setVisible(false);
                applyBtn.setVisible(false);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        
    }//GEN-LAST:event_slideshowBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        try {
            if(isPlaying) {
                playBtn.setText("Play");
                isPlaying = false;
                requestToServer("Stop");
            }
            requestToServer("Back");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_backBtnActionPerformed

    private void applyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyBtnActionPerformed
        try {
            Integer.parseInt(editTime.getText());
            requestToServer("SetTime:" + editTime.getText());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_applyBtnActionPerformed

    private void playBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playBtnActionPerformed
        if(!isPlaying) {
            try {
                playBtn.setText("Stop");
                isPlaying = true;
                requestToServer("Play");
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            try {
                playBtn.setText("Play");
                isPlaying = false;
                requestToServer("Stop");
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_playBtnActionPerformed

    private void closeWindow(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeWindow
        try {
            requestToServer("Close");
            dispose();
            System.exit(0);
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_closeWindow

    /**
     * @param args the command line arguments
     */
    
    public void requestToServer(String request) throws Exception {
        byte[] sendRequest = new byte[1500];
        sendRequest = request.getBytes();   
        DatagramPacket sendPacket = new DatagramPacket(sendRequest, sendRequest.length, IPAddress, 9876);       
        clientSocket.send(sendPacket);  
        
        if(request.equalsIgnoreCase("Close")) {
            clientSocket.close();
            return;
        }
        
        byte[] receiveData = new byte[1500];
        DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
        clientSocket.receive(receivePacket);

        String fileName = new String(receivePacket.getData(), 0, receivePacket.getLength());
        String trimmedName = fileName.trim();
        
        if(trimmedName.contains(".mp3") || trimmedName.contains(".mp4")) {
            playBtn.setVisible(true);
        } else {
            playBtn.setVisible(false);
        }
        
        fileNameLabel.setText(trimmedName);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JFormattedTextField editTime;
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JLabel imagePreview;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton nextBtn;
    private javax.swing.JButton playBtn;
    private javax.swing.JButton slideshowBtn;
    // End of variables declaration//GEN-END:variables
}
