package UI;

import Bean.Audio;
import Bean.Photo;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.*;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.Timer;
import javazoom.jl.player.Player;

public class MultimediaApp extends javax.swing.JFrame {
    private ArrayList<Audio> Audios;
    private ArrayList<Photo> Photos;
    private DatagramSocket serverSocket; 
    private File[] files;
    private int index;
    private JLabel[] label;
    private Photo musicIcon; 
    private Player player;
    private Thread thread;
    private Timer time; 
    
            
    public MultimediaApp(DatagramSocket _serverSocket) {
        initComponents();
        serverSocket = _serverSocket;
        Audios = new ArrayList<>();
        Photos = new ArrayList<>();
        index = 0;
        musicIcon = new Photo("Music Icon", "audio.png");
        showFilesInFolder(new File("C:\\Users\\SVE14112EG\\Github\\RemoteControlMP\\Remote Control\\Multimedia"));
        showImage(setImageSize(index));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        allThumbnails = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        imageViewer = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setViewportView(allThumbnails);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 720, 100));

        jLabel1.setBackground(new java.awt.Color(153, 153, 153));
        jLabel1.setFont(new java.awt.Font("Calibri Light", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Multimedia Application");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 4, 710, 50));
        getContentPane().add(imageViewer, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, 720, 430));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    
    public void playAudio(String path) {
        try {
            BufferedInputStream stream = new BufferedInputStream(new FileInputStream(path));  
            player = new Player(stream);
            thread = new Thread(
                new Runnable(){
                    public void run(){
                        try{
                            player.play();
                        }catch(Exception e){
                            e.printStackTrace();
                        }
                    }
                }
            );
            thread.start();             
        } catch (Exception e) {  
            System.out.println("Problem playing file " + path);  
            e.printStackTrace();
        }
    }
    
    public void showFilesInFolder(File folder) {
        Image thumbnail = null;
        ImageIcon icon = null;
        files = folder.listFiles();
        label = new JLabel[files.length];
        for(int i = 0; i < files.length; i++) {
            String path = files[i].getAbsolutePath();
            int x = path.lastIndexOf('\\');
            String name = path.substring(x+1);
            if(name.endsWith("jpg") || name.endsWith("mp3")) {
                if(name.endsWith("jpg")) {
                    Photo photo = new Photo(name, path);
                    Photos.add(photo);
                    thumbnail = photo.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
                } else {
                    Audio audio = new Audio(name, path);
                    Photos.add(musicIcon);
                    Audios.add(audio);
                    thumbnail = musicIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
                }
                icon = new ImageIcon(thumbnail);
                label[i] = new JLabel();
                label[i].setIcon(icon);
                label[i].setText("");
                allThumbnails.add(label[i]);
                allThumbnails.repaint();
                allThumbnails.updateUI();
            } 
            
        }
    }
    
    public void showImage(ImageIcon icon) {
        imageViewer.setIcon(icon);
    }
    
    public void nextImage() {
        if(index < Photos.size() - 1) {
            index++;
            showImage(setImageSize(index));
        } 
    }
    
    public void prevImage() {
        if(index > 0) {
            index--;
            showImage(setImageSize(index));
        }
    }
    
    public void slideshow(int i) { 
        time = new Timer(i,new ActionListener() { 
            @Override public void actionPerformed(ActionEvent e) { 
                showImage(setImageSize(index)); 
                index++; 
                if(index >= Photos.size())
                    index = 0; 
            } 
        }); 
        
        time.start(); 
    }  
    
    public ImageIcon setImageSize(int i) { 
        Image img = Photos.get(i).getImage().getScaledInstance(imageViewer.getWidth(), imageViewer.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon icon = new ImageIcon(img); 
        return icon; 
    }
    
    public void editTimer(int i) {
        if(time.isRunning()) {
            time.stop();
            slideshow(i);
        }
    }
    
    public void sendFileNames(InetAddress IPAddress, int port) throws IOException {
        byte[] sendData = new byte[1500];
        int audioCheck = 0;
        for(int i = 0; i < Photos.size(); i++) {
            String fileName = Photos.get(i).getFileName();
            System.out.println(fileName);
            if(fileName.equalsIgnoreCase("Music Icon")) {
                fileName = Audios.get(audioCheck).getTitle();
            }
            sendData = fileName.getBytes();
            DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port);
            serverSocket.send(sendPacket);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel allThumbnails;
    private javax.swing.JLabel imageViewer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
